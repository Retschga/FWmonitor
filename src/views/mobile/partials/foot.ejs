
<!-- WRAPPER -->
</div>

<!-- SCRIPT LOADER -->
<script>

    if (!('content' in document.createElement('template'))) {
        alert("Ihr Browser wird nicht unterstützt!");
    }

    // -------- GET Parameter auslesen --------
    var parts = window.location.search.substr(1).split("&");
    var $_GET = {};
    for (var i = 0; i < parts.length; i++) {
        var temp = parts[i].split("=");
        $_GET[decodeURIComponent(temp[0])] = decodeURIComponent(temp[1]);
    }

    const user_id = 35;    


    /**
     * Erstellt ein Cookie
     * @param  {String} 	cname   - Cookie Name
     * @param  {String} 	cvalue  - Cookie Wert
     * @param  {Integer} 	exdays  - Lebesdauer in Tagen
     */
        function setCookie(cname,cvalue,exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays*24*60*60*1000));
        var expires = "expires=" + d.toGMTString();
        document.cookie = cname + "=" + cvalue + ";" + (exdays ? expires + ";" : "") + "path=/";
    }

    /**
     * Gibt den Wert des Cookies zurück
     * @param  {String} 	cname   - Cookie Name
     * @return {String}     Cookie Wert
     */
    function getCookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for(var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
            c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
            }
        }
        return "";
    }

    /**
     * Wechselt mit dem Seitenloader zu einer anderen Seite
     * @param  {String} 	url         - Zielseite
     * @param  {Boolean} 	noHistroy   - Aktuelle Seite aus der History entfernen
     */
    function loaderIn(url, noHistroy) {
        let loader = document.querySelector("#pageloader");
        loader.classList.remove("loader_out")
        loader.classList.add("loader_in");

        if(url) {
            setTimeout(function() {
                if (!noHistroy) {
                    window.location.href = url;
                } else {
                    window.location.replace(url);
                }
            }, 200);
        }       
    }

    /**
     * Versteckt den Seitenloader
     */
    function loaderOut() {
        let loader = document.querySelector("#pageloader");
        loader.classList.remove("loader_in")
        loader.classList.add("loader_out");
    }

    /**
     * Geht mit dem Seitenloader eine Seite zurück
     */
    function goBack() {
        let loader = document.querySelector("#pageloader");
        loader.classList.remove("loader_out")
        loader.classList.add("loader_in");

        setTimeout(function() {
            window.history.back();
        }, 200);
    }

    /**
     * Meldet den Benutzer ab
     */
    async function logout() {
        loaderIn();
        try {
            const data = await fetch_post('/api/v1/auth/logout', {}, true, 10000);

            if(data.message && data.message == 'OK') {                
                setCookie('logout_status', 'true', 1);
                loaderIn('login', true);
                return false;
            }
            if(data.message) {
                console.error("Login Fehler: ", data.message);	
                alert(data.message);
            }
        } catch (error) {
            console.log(error.message);
        }
        loaderOut();
    }

    /**
     * Leitet den Benutzer zum Anmeldebildschirm weiter, falls er nicht eingeloggt ist
     */
    function redirect_if_logged_out() {
        const logout_status = getCookie('logout_status');
        console.log('logout_status', logout_status);

        if(logout_status == 'true') {
            loaderIn('login', true);
        }  
    }

    // **** Events ****
    document.addEventListener('readystatechange', event => { 
        console.log('readyState --> ' + event.target.readyState);

        // When HTML/DOM elements are ready:
        if (event.target.readyState === "interactive") {   //does same as:  ..addEventListener("DOMContentLoaded"..
            
        }

        // When window loaded ( external resources are loaded too- `css`,`src`, etc...) 
        if (event.target.readyState === "complete") {            
                       
        }
    });

    window.addEventListener('load', (event) => {
        console.log('The page has fully loaded');
        loaderOut();  
    });

    window.addEventListener('onpageshow', (event) => {
        console.log('The page has been shown');
        loaderOut();  
    });
   
    window.addEventListener("click", (event) => {
        if (event.target.classList.contains('modal')) {
            event.target.style.display = "none";
        }
    }, false);

    window.onunload = function(){
        console.log('The page is unloading');
    };   
    

    // **** Hilfsfunktionen ****
    function tab_switch(pageName, elmnt) {
        // Hide all elements with class="tabcontent" by default */
        var i, tabcontent, tablinks;
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }

        // Remove the background color of all tablinks/buttons
        tablinks = document.getElementsByClassName("tablink");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].classList.remove('tablink_active');
        }

        // Show the specific tab content
        document.getElementById(pageName).style.display = "block";

        elmnt.classList.add('tablink_active');
    }

    function accordion_switch(elmnt) {
        /* Toggle between adding and removing the "active" class,
            to highlight the button that controls the panel */
            elmnt.classList.toggle("accordion_active");

        /* Toggle between hiding and showing the active panel */
        var panel = elmnt.nextElementSibling;
        if (panel.style.display === "block") {
        panel.style.display = "none";
        } else {
        panel.style.display = "block";
        }
    }
 
    function setSelectedIndex(s, v) {
        for ( var i = 0; i < s.options.length; i++ ) {
            if ( s.options[i].value == v ) {
                s.options[i].selected = true;
                return;
            }
        }
    }

    var parseKalenderSummary = function(summary) {
        // Terminname in Text und Icon aufreilen
        let text = summary.substring(2);
        let icon = summary.substring(0,4);
        if(icon.match(/[A-Z0-9äöüÄÖÜß]/i) != null) {
            icon = summary.substring(0,2);
            if(icon.match(/[A-Z0-9äöüÄÖÜß]/i) != null) {
                text = icon + text;
                kalenderBearbeiten_hasIcon = false;
            }
        }
        return {text: text, icon: icon};
    }
   
    function escapeHtml(str) {
        var div = document.createElement('div');
        div.appendChild(document.createTextNode(str));
        return div.innerHTML;
    }

    // Input Prefixes
    // https://stackoverflow.com/questions/4535963/how-can-i-add-an-unremovable-prefix-to-an-html-input-field
    function addFormatter (input, formatFn) {        
        let oldValue = input.value;
        
        const handleInput = event => {
            const result = formatFn(input.value, oldValue, event);
            if (typeof result === 'string') {
                input.value = result;
            }
            
            oldValue = input.value;
        }
    
        handleInput();
        input.addEventListener("input", handleInput);
    }
    function regexPrefix (regex, prefix) {
        return (newValue, oldValue) => regex.test(newValue) ? newValue : (newValue ? oldValue : prefix);
    }

    // FETCH Helper functions
    // https://jasonwatmore.com/post/2020/04/18/fetch-a-lightweight-fetch-wrapper-to-simplify-http-requests
    function fetch_get(url, json = false, timeout = 20000) {
        const controller = new AbortController();
        const requestOptions = {
            method: 'GET',            
            signal: controller.signal
        };
        const timeoutId = setTimeout(() => controller.abort(), timeout);
        if(json)
            return fetch(url, requestOptions).then(fetch_handleResponse_json);
        else 
            return fetch(url, requestOptions).then(fetch_handleResponse_text);
    }
    function fetch_post(url, body, json = false,timeout = 20000) {
        const controller = new AbortController();
        const requestOptions = {
            method: 'POST',            
            signal: controller.signal,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(body)
        };
        const timeoutId = setTimeout(() => controller.abort(), timeout);
        if(json)
            return fetch(url, requestOptions).then(fetch_handleResponse_json);
        else 
            return fetch(url, requestOptions).then(fetch_handleResponse_text);
    }
    function fetch_handleResponse_json(response) {
        return response.text().then(text => {
            const data = text && JSON.parse(text);
            
            if (!response.ok) {
                const error = (data && data.message) || response.statusText;
                return Promise.reject(error);
            }

            return data;
        });
    }
    function fetch_handleResponse_text(response) {
        return response.text().then(text => {

            if (!response.ok) {
                const error = (data && data.message) || response.statusText;
                return Promise.reject(error);
            }

            return text;
        });
    }


  

</script>

