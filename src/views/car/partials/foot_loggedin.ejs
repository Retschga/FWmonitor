<!-- SCRIPT LOADER -->
<script>    

    let car_name = localStorage.getItem('car_name');

    // Websockets
    var ws_software = null;

    const url_alarm_list = '/api/v1/alarm/list?offset=:offset&limit=:limit';
    const url_alarm = '/api/v1/alarm/:id';
    const url_alarm_isalarm = '/api/v1/alarm/isalarm';
    const url_alarm_last = '/api/v1/alarm/last';
    const url_alarm_route = '/api/v1/alarm/route/:id';
    const url_alarm_streetCache = '/api/v1/alarm/streetcache/:id';

    const url_map_forstrettpkt = '/rettPunkte.geojson';
    const url_map_hydranten = '/api/v1/hydrant/:lat/:lng';

	// Server Verbindungsstatus
    function update_server_status(val) {
        if(val) {
            document.querySelector('.var_server_ok')?.classList.remove('hidden');
            document.querySelector('.var_server_error')?.classList.add('hidden');
        } else {
            document.querySelector('.var_server_ok')?.classList.add('hidden');
            document.querySelector('.var_server_error')?.classList.remove('hidden');
        }
    }

    // Websocket Server Verbindung
    async function ws_server_connect() {	
        ws_software = new WebSocket('wss://'+window.location.hostname+(window.location.port ? ':'+window.location.port: '')+'?token='+getCookie('token'));
        let wsStatusInterval = null;
        var keepAliveInterval = null;
        let log = "";

        const userrights = await fetch_get('/api/v1/user/rights', true);
        console.log('userrights', userrights);

        car_name = userrights.name;
        localStorage.setItem('car_name', car_name);

        // Sende Status Datensatz
        let sendStatus = () => {ws_software.send(
            `{
                "topic": "init",
                "type":"AutoClient",
                "name":"Auto - ${car_name}",
                "info":"Initial",
                "actions":[
                    {"id":"0"},
                    {"id":"7"},
                    {"id":"8", "key": "Version", "value": "<%= version %>"},
                    {"id":"-1", "key": "GPS FIX", "value": "${GPS_hasFIX}"},
                    {"id":"9", "key": "GPS Pos", "value": "${GPS_now.lat}, ${GPS_now.lng}"},
                    {"id":"-2", "key": "Wlan", "value": "${status_connWlan.replace(/\"/g, '')}"},
                    {"id":"-3", "key": "USB Tethering", "value": "${status_usbtether}"},
                    {"id":"-4", "key": "LOG", "value": "${log}"}
            ]}`
        );}   
        let sendStatusUpdate = () => {ws_software.send(
            `{
                "topic": "update",
                "info":"Update",
                "actions":[
                    {"id":"-1", "key": "GPS FIX", "value": "${GPS_hasFIX}"},
                    {"id":"9", "key": "GPS Pos", "value": "${GPS_now.lat}, ${GPS_now.lng}"},
                    {"id":"-2", "key": "Wlan", "value": "${status_connWlan.replace(/\"/g, '')}"},
                    {"id":"-3", "key": "USB Tethering", "value": "${status_usbtether}"},
                    {"id":"-4", "key": "LOG", "value": "${log}"}
            ]}`
        );}      

        ws_software.onopen = function() {
            console.log("Software-connection socketconnected:");

            // Sende Status Datensatz
            sendStatus();

            // Setze Verbindungsstatus auf OK
            update_server_status(true);

            // Sende alle 30 sek einen Statusdatensatz
            wsStatusInterval = setInterval( () => {
                sendStatusUpdate();
            }, 30000);

            // Sende KeepAlive Intervall
            lastKeepAlive = new Date();
            keepAliveInterval = setInterval(() => {
                if((new Date().getTime() - lastKeepAlive.getTime()) / 1000 > 60) {		
                    update_server_status(false);				
                    location.reload(); 
                }
            }, 10000)
        };

        ws_software.onmessage = function(e) {
            let socket = ws_software;
            let data = e.data;
            console.log('Software-connection socket message:', data);
			
            data           = JSON.parse(data);
            const topic    = data.topic;
            const message  = data.message;
            
            // Keep Alive
            if(topic == 'ping') {
                lastKeepAlive = new Date();	
                socket.send(JSON.stringify({topic: 'pong', message :message}));				
                loaderOut();
            }

            // Alarm
            if(topic == 'alarm') {
                // GPS Statistik für Einsatz zurücksetzen
                localStorage.setItem('gps.distSum', GPS_dist_sum);
                localStorage.setItem('gps.altMax', GPS_alt_max);
                localStorage.setItem('gps.altMin', GPS_alt_min);

                location.reload(); 
            }

            if(topic == 'action_0') {
                location.reload(); 
            }
            
            if(topic == 'action_7') {
                loaderIn(undefined, undefined, 'Neustart');
                wsSteuer.send('restart');
            }

            if(topic == 'action_8') {
                loaderIn(undefined, undefined, 'Update');
                wsSteuer.send('update');
            }
        };

        ws_software.onclose = function(e) {
            console.log('Software-connection socket is closed. Reconnect will be attempted in 15 second.', e.reason);
            update_server_status(false);	
            clearInterval(wsStatusInterval);
            clearInterval(keepAliveInterval);
            setTimeout(function() {
                ws_server_connect();
            }, 15000);
        };

        ws_software.onerror = function(err) {
            console.error('Software-connection socket encountered error: ', err.message, 'Closing socket');
            update_server_status(false);
            clearInterval(wsStatusInterval);
            clearInterval(keepAliveInterval);
            ws_software.close();
            setTimeout(function() {
                ws_server_connect();
            }, 15000);
        };
    }




    


</script>

