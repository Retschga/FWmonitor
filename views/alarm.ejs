<!DOCTYPE html>
<html lang="de">
    <head>
		<!-- HTML EINSTELLUNGEN -->
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>FWmonitor - Alarm</title>
	
		<!-- CSS -->
        <link rel="stylesheet" type="text/css" href="stylesheets/main.css">
        <link rel="stylesheet" type="text/css" href="stylesheets/alarm.css">
		<link rel="stylesheet" type="text/css" href="stylesheets/leaflet.css">

		<!-- MOBILE UI -->		
		<link rel="stylesheet" href="/mobileui/base/mobileui.css">
		<link rel="stylesheet" href="/mobileui/base/colors.css">
		<link rel="stylesheet" href="/mobileui/base/font.css">
		<link rel="stylesheet" href="/mobileui/base/icons.css">	
		<link rel="stylesheet" href="/mobileui/header/style.css">
		<link rel="stylesheet" href="/mobileui/button/style.css">		
		<link rel="stylesheet" href="/mobileui/list/style.css">
		<link rel="stylesheet" href="/mobileui/page/style.css">	
		<link rel="stylesheet" href="/mobileui/grid/style.css">		
		<link rel="stylesheet" href="/mobileui/menu/style.css">	
		<link rel="stylesheet" href="/mobileui/input/style.css">	
		<link rel="stylesheet" href="/mobileui/loading/style.css">
		<link rel="stylesheet" href="/mobileui/alert/style.css">
		<link rel="stylesheet" href="/mobileui/toast/style.css">
    </head>
    <body>

		<!-- HEADER -->		
		<header class="header red-600">
			<div class="left">
				<button class="icon ion-navicon-round"  name="button"  onclick="openMenu('leftMenu')"></button>
			</div>		
			<div class="right" id="time">--:--:-- - --.--.----</div>			
			<div class="right align-center"  id="fwlogo">
				<i id="symbol1" style="margin-right: 1em;" class="icon"></i>
				<span  id="elapsedtime">00m 00s</span>
				<i id="symbol2" style="margin-left: 1em;" class="icon"></i>
			</div>	
		</header>

		<!--MENÜ -->		
		<div class="menu red-300" id="leftMenu">
			<div class="cover align-center red-600 border-bottom-white">
				<div class="space"></div>
				<img class="avatar circle border-white shadow" src="/icons/icon-384x384.png" style="width: 30%"/>
				<h1 class="">FWmonitor</h1>
				<div class="space"></div>
			</div>
			<button class="red-600 full border-bottom-white" onclick="goToIndex();" >Standby Ansicht</button>
			<button class="red-600 full border-bottom-white" onclick="window.location.href = '/einstell';" >Einstellungen</button>
			<button class="red-600 full border-bottom-white selectedButton" onclick="" >Letzter Alarm</button>
			<button class="red-600 full border-bottom-white" onclick="alert('F11 drücken')" >Vollbild</button>
		</div>

		<!-- CONTENT -->		
        <div id="main_content" class="has-header">
            
			<!-- Alarminfo -->		
            <div id="top">
                <div id="einsatzstichw">
					<%= alarmdata["EINSATZSTICHWORT"] %> - 
					<%= alarmdata["SCHLAGWORT"] %><br>
					<%= alarmdata["OBJEKT"] %>
                </div>
				<div id="bemerk">
					<%= alarmdata["BEMERKUNG"] %>
                </div>
            </div>           
            
			<!-- Alarmort -->		
            <div id="ort">
				<%= alarmdata["STRASSE"] %>, 
				<%= alarmdata["ORTSTEIL"] %>, 
				<%= alarmdata["ORT"] %>
            </div>
            
			<!-- Autos, Karte, Kommen -->		
            <div id="center">
                <div id="fahrzeuge">
                    <div id="fz_eigen">
						<% for(i in alarmdata["cars1"]) { %>
							<p><%= alarmdata["cars1"][i] %></p>
						<% } %>
                    </div>
                    <div id="fz_andere">
                        <% for(i in alarmdata["cars2"]) { %>
							<p><%= alarmdata["cars2"][i] %></p>
						<% } %>
                    </div>
                </div>
                <div id="karte">
                    <div id="mapid"></div>
                </div>
                <div id="status">
					<div id="st_numbers">
						<div id="count_komme">0</div>
						<div id="count_nicht">0</div>
						<div id="count_später">0</div>
					</div>
                    <div id="st_komme"></div>
                    <div id="st_nicht">
						 <% for(i in alarmdata["st_nichtverf"]) { %>
								<div class="stdiv st_telegram" id="<%= alarmdata["st_nichtverfID"][i] %>">Telegram: <%= alarmdata["st_nichtverf"][i] %></div>
						<% } %>
                    </div>
                    <div id="st_später"></div>
                </div>
            </div>       
        </div> 

		
		<!-- JS -->
		<script src="/javascripts/leaflet.js"></script>

		<script src="javascripts/jquery.js"></script>
		<script src="/mobileui/base/base.js"></script>
		<script src="/mobileui/button/script.js"></script>
		<script src="/mobileui/toast/script.js"></script>
		<script src="/mobileui/page/script.js"></script>
		<script src="/mobileui/menu/script.js"></script>
		<script src="/mobileui/input/script.js"></script>
		<script src="/mobileui/loading/script.js"></script>
		<script src="/mobileui/alert/script.js"></script>		

		<script> 

			// -------- GET Parameter auslesen --------
			var parts = window.location.search.substr(1).split("&");
			var $_GET = {};
			for (var i = 0; i < parts.length; i++) {
				var temp = parts[i].split("=");
				$_GET[decodeURIComponent(temp[0])] = decodeURIComponent(temp[1]);
			}

			// Einstellungen
			var tempID = parseInt($_GET['tempID']);
			var clientName = $_GET['name'];			
			console.log("Clientname: ", clientName);
			var einsatzstichwort = '<%= alarmdata["EINSATZSTICHWORT"] %>';

			/**
			 * Wechselt zur Index Seite
			 */
			function goToIndex() {
				window.location.href = '/?name=' + clientName;
			}

			
			// -------- Overpass-API URLs --------     siehe Ovepass turbo
			var overpassHydrantenUrl = `http://overpass-api.de/api/interpreter?data=
				[out:json][timeout:25];
				(
				node[%22emergency%22=%22fire_hydrant%22]
				(around:2000,<%= alarmdata["LAT"] %>, <%= alarmdata["LNG"] %>);
				node[%22emergency%22=%22water_tank%22]
				(around:2000,<%= alarmdata["LAT"] %>, <%= alarmdata["LNG"] %>);
				node[%22emergency%22=%22suction_point%22]
				(around:2000,<%= alarmdata["LAT"] %>, <%= alarmdata["LNG"] %>);
				);
				out;
				%3E;
				out%20skel%20qt;`;
			var overpassTimestamp = "";
			var features = [];
			var overpassStrassenUrl = `http://overpass-api.de/api/interpreter?data=
				[out:json][timeout:25];
				(
				way[%22name%22~%22${'<%= alarmdata["STRASSE"] %>'.replace(/ss|ß/g, '(ss|ß)')}%22]
				(around:1000,<%= alarmdata["LAT"] %>, <%= alarmdata["LNG"] %>);
				);
				out geom;
				%3E;
				out%20skel%20qt;`;		
			var overpassGebaudeUrl = `http://overpass-api.de/api/interpreter?data=
				[out:json][timeout:25];
				(
				way[building]
				(around:200,<%= alarmdata["LAT"] %>, <%= alarmdata["LNG"] %>);
				);
				out geom;
				%3E;`;				
		
		
			// -------- Bemerkung Schriftgröße an Textlänge anpassen --------
			var lvalue=document.getElementById("bemerk").innerHTML.length;
			if(lvalue>200)
				document.getElementById("bemerk").style.fontSize = "1em";
			if(lvalue>400)
				document.getElementById("bemerk").style.fontSize = "0.8em";
				

			// -------- Karte --------
			var center = [<%= alarmdata["LAT"] %>, <%= alarmdata["LNG"] %>];
			var map = L.map('mapid').setView(center, 16);

			L.tileLayer('https://{s}.tile.openstreetmap.de/{z}/{x}/{y}.png', {
			//L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
				attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
			}).addTo(map);
						
			// var overlay;
			// L.tileLayer('http://tiles.wmflabs.org/hillshading/{z}/{x}/{y}.png').addTo(map);
			// overlay = L.tileLayer('{z}/{x}/{y}.png', {
			// 	opacity: 1.5
			//   }).addTo(map);
	
			
			var icons = {
				'pipe': L.icon({iconUrl: "/images/map_marker_hydrant_pipe.png",iconSize: [24,32]}),
				'wall': L.icon({iconUrl: "/images/map_marker_hydrant_wall.png",iconSize: [24,32]}),
				'pillar': L.icon({iconUrl: "/images/map_marker_hydrant_ueberflur.png",iconSize: [24,32]}),
				'underground': L.icon({iconUrl: "/images/map_marker_hydrant_unterflur.png",iconSize: [24,32]}),
				'pond': L.icon({iconUrl: "/images/map_marker_openwater.png",iconSize: [24,32]}),
				'water_tank': L.icon({iconUrl: "/images/map_marker_tank.png",iconSize: [24,32]}),
				'rettPkt': L.icon({iconUrl: "/images/map_marker_rettPkt.png",iconSize: [24,30]})
			}
			
			function loadHydrantenData() {
				//document.getElementById("hydrant_aktual_zeit").innerHTML = "werden geladen ...";
				var xmlHttp = new XMLHttpRequest();
				xmlHttp.onreadystatechange = function() { 
					if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {
						var responseJSON = JSON.parse(xmlHttp.responseText);
						
						// Timestamp der aktualisierung
						overpassTimestamp = responseJSON["osm3s"]["timestamp_osm_base"];
						
						// Hydranten ausgeben
						var dataIn = responseJSON["elements"];
						features = [];
						
						for (i = 0; i < dataIn.length; i++) {
						
							var dataElement = dataIn[i];
							var name = "";
							
							name = dataElement["tags"]["fire_hydrant:type"];

							if (dataElement["tags"]["emergency"] == "water_tank")
								name = "water_tank"				

							if(dataElement["tags"]["water_source"] == "pond")
								name = "pond";

							if(dataElement["tags"]["emergency"] == "suction_point")
								name = "pond";
							
							
							features.push({
								"type": "Feature",
								"geometry": {
									"type": "Point",
									"coordinates": [dataElement["lon"], dataElement["lat"]]
								},
								"properties": {
									"title": name,
									"iconcategory": "icons"
								}
							});
							
						}
						//document.getElementById("hydrant_aktual_zeit").innerHTML = overpassTimestamp;
						L.geoJSON(features, {
							pointToLayer: function (feature, latlng) {
							
								//console.log(feature["properties"]["title"]);
								return L.marker(latlng, {								
									icon: icons[feature["properties"]["title"]]
								});
								
							}
						}).addTo(map);
					}
				}
				xmlHttp.open("GET", overpassHydrantenUrl, true); // Asynchron -> true 
				xmlHttp.send(null);
			}
			
			function loadStrassenData() {
				var xmlHttp = new XMLHttpRequest();
				xmlHttp.onreadystatechange = function() { 
					if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {
						var responseJSON = JSON.parse(xmlHttp.responseText);
						
						var dataIn = responseJSON["elements"];
						var polylinePoints = [];

						console.log('Strassendaten', dataIn);

						if(dataIn.length < 1)
							return;

						for (i = 0; i < dataIn.length; i++) {
						
							var dataElement = dataIn[i];
							
							if(dataElement.type=="way") {
							
								var polyarr = [];
								for (j = 0; j < dataElement.geometry.length; j++) {
								
									polyarr.push([dataElement.geometry[j].lat, dataElement.geometry[j].lon]);

								}
							
								polylinePoints.push(polyarr);
							}
								

						}
						console.log(polylinePoints);
						var polyline = L.polyline(polylinePoints, {color: 'blue', weight: 10}).addTo(map);

						map.fitBounds(polyline.getBounds(), {padding: [70, 70]});
					}
				}
				xmlHttp.open("GET", overpassStrassenUrl, true); // Asynchron -> true 
				xmlHttp.send(null);
			}
			
			function loadGebaudeData() {
				var xmlHttp = new XMLHttpRequest();
				xmlHttp.onreadystatechange = function() { 
					if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {
						var responseJSON = JSON.parse(xmlHttp.responseText);
						
						var dataIn = responseJSON["elements"];

						if(dataIn.length < 5)
							map.setView(center, 13);								


					}
				}
				xmlHttp.open("GET", overpassGebaudeUrl, true); // Asynchron -> true 
				xmlHttp.send(null);
			}
			
			function loadForstRettPkt() {
				//document.getElementById("hydrant_aktual_zeit").innerHTML = "werden geladen ...";
				var xmlHttp = new XMLHttpRequest();
				xmlHttp.onreadystatechange = function() { 
					if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {
						var responseJSON = JSON.parse(xmlHttp.responseText);
						
						var geojsonMarkerOptions = {
							radius: 20,
							fillColor: "#ff7800",
							color: "#000",
							weight: 1,
							opacity: 1,
							fillOpacity: 0.8
						};

						L.geoJSON(responseJSON, {
							pointToLayer: function (feature, latlng) {
								//return L.circleMarker(latlng, geojsonMarkerOptions);
								return L.marker(latlng, {								
									icon: icons["rettPkt"]
								}).bindTooltip(feature["properties"]["FIELD1"], 
								{
									permanent: true, 
									direction: 'right',
									offset: [10,0],
									opacity: 0.7
								});
							}
						}).addTo(map);
						
					}
				}
				xmlHttp.open("GET", "/rettPunkte.geojson", true); // Asynchron -> true 
				xmlHttp.send(null);
			}
			

			// -------- Alarmauswertung --------
			let color = "red-600";
			let icon = "ion-fireball";
			let stichwort = einsatzstichwort.toLowerCase();
			if(stichwort.includes("inf") || stichwort.includes("1nf")) {
				color = 'green';
				icon = "ion-information-circled";
			}
			else if(stichwort.includes("thl")) {
				color = 'blue-900';
				icon = "ion-settings";
			} 
			else if(stichwort.includes("rd")) {
				color = 'orange-800';
				icon = "ion-ios-medkit-outline";
			}
			document.getElementById("top").classList.add(color);
			document.getElementById("symbol1").classList.add(icon);
			document.getElementById("symbol2").classList.add(icon);
			
			// -------- 1 Sekunden nach Seite geladen --------
			setTimeout(function() {						
				
				// Karte genau? sonst keine Karte
				if(<%= alarmdata["noMap"] %> == true) {
					var imageUrl = '/images/noMap.png',
					imageBounds = [center, map.getBounds()];					
					L.imageOverlay(imageUrl, imageBounds).addTo(map);

				} else {
					loadHydrantenData();
					loadForstRettPkt();					
					
					if(<%= alarmdata["ISADDRESS"] %> == 1) {
						console.log("Adresse: Ja -> lade Gebäudedaten");
						var circle = L.circle(center, {
							color: 'red',
							fillColor: '#f03',
							fillOpacity: 0.5,
							radius: 30
						}).addTo(map);			
						//loadGebaudeData();

					} else {
						console.log("Adresse: Nein -> lade Strassendaten");
						map.setView(center, 15);
						loadStrassenData();
					}
				}
				
				// Uhrzeitanzeige
				setInterval(() => {
					var d = new Date();
					var options = {  year: 'numeric', month: '2-digit', day: '2-digit' };
					var time = d.toLocaleTimeString();
					var date = d.toLocaleDateString('de-DE', options);
					document.getElementById('time').innerHTML = time + " - " + date;
					ticken();
				  }, 1000);            

				// Alarmzeitanzeige
				var startDate = new Date("<%= alarmdata["time"] %>");			
				function ticken(){
					var stunden, minuten, sekunden;
					var StundenZahl, MinutenZahl, SekundenZahl;
					var heute;

					heute = new Date();
					StundenZahl = startDate.getHours();
					MinutenZahl = startDate.getMinutes();
					SekundenZahl = startDate.getSeconds();
					
					stunden = StundenZahl+":";
					if (MinutenZahl < 10) {minuten = "0" + MinutenZahl + ":";}
						else {minuten = MinutenZahl + "";}
					zeit = stunden + minuten + " Uhr";
					var alarmzeit = zeit;
					
					
					var diff = heute.getTime() - startDate.getTime();
					
					if($_GET['manuell'] != "true") {
						var elapsedMinutes = Math.floor(diff / (1000*60));
						if(elapsedMinutes > <%= alarmdata["VISIBLETIME"] %>)
						goToIndex();
					}
					
					var tag = Math.floor(diff / (1000*60*60*24));
					diff = diff % (1000*60*60*24);
					var std = Math.floor(diff / (1000*60*60));
					diff = diff % (1000*60*60);
					var MinutenZahl = Math.floor(diff / (1000*60));
					diff = diff % (1000*60);
					var SekundenZahl = Math.floor(diff / 1000);
					
					stunden = "";
					if (std > 0) {stunden = std+"h ";}
					if (MinutenZahl < 10) {minuten = "0" + MinutenZahl + "m ";}
						else {minuten = MinutenZahl + "m ";}
					if (SekundenZahl < 10) {sekunden = "0" + SekundenZahl + "s ";}
						else {sekunden = SekundenZahl + "s ";}
					zeit = stunden + minuten + sekunden;

					elapsedtime.innerHTML = "Alarm: " + alarmzeit +" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "+ zeit;
				}

				// Anzahl Kommen/Komme Nicht
				function countNumbers() {
					document.getElementById('count_komme').innerHTML = document.getElementById("st_komme").childElementCount;
					document.getElementById('count_nicht').innerHTML = document.getElementById("st_nicht").childElementCount;
					document.getElementById('count_später').innerHTML = document.getElementById("st_später").childElementCount;
				}
				countNumbers();
				
				// Websocket Verbindung
				function connect() {
					var ws = new WebSocket('ws://'+window.location.hostname+(window.location.port ? ':'+window.location.port: ''));
					ws.onopen = function() {
						console.log("WebSocketClient connected:");
						this.send(`{"type":"WebClient",
							"name":"Alarmdisplay - ${clientName}",
							"info":"Alarm",
							"actions":[
								{"id":"5"},
							]}`);
					};

					// Daten empfangen
					ws.onmessage = function(e) {
						console.log('Message:', e.data);
					
						var dat = e.data.split('|');
						topic = dat[0];
						msg = dat[1].split('%');

						// Neuer Alarm
						if(topic == 'alarm' && tempID != parseInt(msg[0])) {
							window.location.href = '/alarm?tempID=' + msg[0] + '&name=' + clientName;
							//location.reload();
						} 
							
						// Zurück zum Standby
						if(topic == 'zurueck')
							window.location.href = '/?name=' + clientName;

						// Seite neu laden
						if(topic == 'reload')
							location.reload(); 
						
						// Anzeige Kommen/Komme Nicht
						var el = undefined;
						if(topic == 'st_komme') {
							el = document.getElementById('st_komme');                        
						}
						if(topic == 'st_nicht') {
							el = document.getElementById('st_nicht');
						}
						if(topic == 'st_später') {
							el = document.getElementById('st_später');                        
						}						
						if(el != undefined) {						
							var myElem = document.getElementById("st_"+msg[0].replace(/ /g,"_"));
							var elChild = null;
							if (myElem !== null) 		
								elChild = document.getElementById("st_"+msg[0].replace(/ /g,"_")).remove();

							elChild = document.createElement('div');
							elChild.className = "stdiv";

							if(msg[1] != undefined) {
								var entry = msg[1].split(',')												
								if(entry[0] == 1) {
									elImg = document.createElement('img');	
									elImg.src = "images/AGT.png"; 
									elChild.prepend(elImg);
								}
								if(entry[2] == 1) {
									elImg = document.createElement('img');	
									elImg.src = "images/MA.png"; 
									elChild.prepend(elImg);
								}
								if(entry[1] == 1) {
									elImg = document.createElement('img');	
									elImg.src = "images/GRF.png"; 
									elChild.prepend(elImg);
								}
								if(entry[3] == 1) {
									elImg = document.createElement('img');	
									elImg.src = "images/ZUGF.png"; 
									elChild.prepend(elImg);
								}
							}

							elChild.innerHTML += msg[0];
							elChild.id = "st_"+msg[0].replace(/ /g,"_");
							
							el.prepend(elChild);
						}
						countNumbers();					   
					};

					// Socket geschlossen
					ws.onclose = function(e) {
						console.log('Socket is closed. Reconnect will be attempted in 1 second.', e.reason);
						setTimeout(function() {
							connect();
						}, 1000);
					};

					// Socket Fehler
					ws.onerror = function(err) {
						console.error('Socket encountered error: ', err.message, 'Closing socket');
						ws.close();
					};
				}
				connect();
				
			}, 1000);

		</script>
    </body>
</html>
